#include <stdio.h> 
#include <math.h>
#include <assert.h>
#include <string.h>

enum Amount {ZERO, ONE, TWO, INFINIT};




/*!
	\brief Структура для хранения ответов

	Данная структура сохраняет количество корней в переменную amount и сами корни в массив roots
*/
struct Answers {
	enum Amount amount;
	double roots[2];
};

/*!
	\brief Структура для хранения коэффициентов уравнения

	Данная структура сохраняет значения коэффициентов a,b,c в переменные a,b и с соответсвенно
*/
struct Coefficients {
	double a;
	double b;
	double c;
};

/*!
	\brief Стурктура для хранения теста

	Данная структура сохраняет значения коэффициентов a, b, c и эталонный ответ.
*/
typedef struct Test{ // структура для хранения теста
    struct Answers Ans;
    struct Coefficients Coef;
} TEST;


/*!
	\brief Функция для ввода данных
	\param Coefficient Структура для хранения коэффициентов уравнения 

	Функция записывает в уже созданную структуру значения a,b и с    
*/
void input(struct Coefficients* Coefficients); // для ввода данных


/*!
	\brief Функция очищения ввода

	При неверном формате ввода коэффициентов данная функция очищает входные данные,
	чтобы scanf() могла обработать следующую попытку ввода
*/
void eatline(); // для отбрасывания отсальной части строки, если данные будут введены с мусором


/*!
	\brief Функция повторного ввода

	При неверном формате ввода коэффициентов данная функция запрашивает у пользователя
	повторный ввод данных, выводя перед этим сообщение "Just enter a number". Используется
	совместно с eatline()
*/
void wrong_input(); // на случай неправильного ввода


/*!
	\brief Функция, управляющая решением уравнения
	\param ans Структура для хранения ответа
	\param Coef Структура для хранения коэффициентов уравнения

	Данная функция вызывает функцию linear_equation(), если уравнение является линейным (а = 0)
	и вызывает функцию the_quadratic_equation в противном случае.
*/
void solve_equation(struct Answers* ans, struct Coefficients* Coef); // решение уравнения


/*!
	\brief Функция для решения линейного уравнения
	\param ans Структура для хранения ответа
	\param Coef Структура для хранения коэффициентов уравнения

	Данная функция вызывается функцией solve_equation() в случае, если а = 0 
	(то есть уравнение является линейным)
*/
void linear_equation(struct Answers* ans, struct Coefficients* Coef); // если а == 0


/*!
	\brief Функция решения через дpискриминант
	\param ans Структура для хранения ответа
	\param Coef Структура для хранения коэффициентов уравнения

	Данная функция вызывается функцией solve_equation() в случае, если а != 0
	(то есть уравнение является квадратным). Решение происходит через дискриминант.

*/
void the_quadratic_equation(struct Answers* ans, struct Coefficients* Coef); // решение через дискриминант


/*!
	\brief Функция для вывода ответа
	\param ans Структура для хранения ответа

	Данная функция выводит члены структуры Answers, а именно количество корней и их значения
	(если они существуют).
*/
void print_answers(struct Answers* ans);

/*!
	\brief Функция, тестирующая программу на экстремальных значениях

	Данная функция принимает коэффициенты уравнения и эталонный ответ и сравнивает с ответом,
	который получается функция решения.
*/

int UnitTestSolution(void);

/*!
	\brief Функция приема функцией UnitTestSolution() коэффиентов уравнения и эталонного ответа
	\param test Массив структур, хранящих в себе данные о тестах
*/

void input_s(TEST (*test)[6]); //Функция, обрабатывающая ввод теста

/*!
	\brief Функция сравнения ответов
	\param test Структура, хранящая коэффициента и эталонный ответ
	\param ans1 Структура, хранящая ответ, полученный программой
*/

bool compair(TEST *test, struct Answers * ans1); //Функция, сравнивающая эталонный ответ с тем, который получила программа

/*!
	\brief Функция главного меню

	Функция спрашивает у пользователя, хочет ли он решить новое уравнение или проверить программу
	на экстремальных значениях
*/
int menu(void); 


/*! \brief Функция проверяющая коэффициента

	Функция, которая проверяет не равны ли коэффициенты NAN или infinity
*/
int check_Coef(struct Coefficients * Coef);


/*!
	Функция, проверяющая числа double на равенство
*/
int iseallity(double, double);


const double zero = 1e-20;
